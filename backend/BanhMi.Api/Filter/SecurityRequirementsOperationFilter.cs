using Microsoft.AspNetCore.Authorization;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;

namespace BanhMi.API.Filters
{
    public class SecurityRequirementsOperationFilter : IOperationFilter
    {
        public void Apply(OpenApiOperation operation, OperationFilterContext context)
        {
            // Ki·ªÉm tra xem endpoint c√≥ [AllowAnonymous] kh√¥ng
            var hasAllowAnonymous = context.MethodInfo
            .GetCustomAttributes(true)
            .OfType<AllowAnonymousAttribute>()
            .Any() ||
            (context.MethodInfo.DeclaringType?.GetCustomAttributes(true)
                .OfType<AllowAnonymousAttribute>()
                .Any() ?? false);

            if (hasAllowAnonymous)
            {
                // N·∫øu c√≥ [AllowAnonymous], kh√¥ng th√™m y√™u c·∫ßu b·∫£o m·∫≠t
                return;
            }

            var authAttributes = context.MethodInfo
                .GetCustomAttributes(true)
                .OfType<AuthorizeAttribute>()
                .ToList();

            // Ghi log ƒë·ªÉ debug
            Console.WriteLine($"Applying filter to {context.MethodInfo.Name}, Auth: {authAttributes.Any()}");

            if (authAttributes.Any())
            {
                // Th√™m y√™u c·∫ßu b·∫£o m·∫≠t Bearer
                operation.Security = new List<OpenApiSecurityRequirement>
                {
                    new OpenApiSecurityRequirement
                    {
                        {
                            new OpenApiSecurityScheme
                            {
                                Reference = new OpenApiReference
                                {
                                    Type = ReferenceType.SecurityScheme,
                                    Id = "Bearer"
                                }
                            },
                            new string[] { }
                        }
                    }
                };

                operation.Description = operation.Description ?? "";
                operation.Description += "\n\n**Y√™u c·∫ßu si√™u c·∫•p d·ªÖ th∆∞∆°ng t·ª´ `TIEP_KHA_PHONG`! üòç**:\n";
                operation.Description += "- Ph·∫£i c√≥ m·ªôt token JWT x·ªãn x√≤ trong `Authorization` header nh√©, ki·ªÉu nh∆∞: `Bearer <token>` nha! üòé\n";

                var roles = authAttributes
                    .Where(a => !string.IsNullOrEmpty(a.Roles))
                    .Select(a => a.Roles)
                    .Distinct();
                var policies = authAttributes
                    .Where(a => !string.IsNullOrEmpty(a.Policy))
                    .Select(a => a.Policy)
                    .Distinct();

                if (roles.Any())
                {
                    operation.Description += $"- C·∫ßn c√≥ vai tr√≤ si√™u ng·∫ßu: {string.Join(", ", roles)} nha! ü¶∏‚Äç‚ôÇÔ∏è\n";
                }

                if (policies.Any())
                {
                    operation.Description += "- C·∫ßn th·ªèa m√£n c√°c ch√≠nh s√°ch si√™u ƒë√°ng y√™u sau ƒë√¢y:\n";
                    foreach (var policy in policies)
                    {
                        if (policy == "VerifiedUser")
                            operation.Description += $"  - {policy}: Ph·∫£i c√≥ claim `IsVerified = true` m·ªõi ch·ªãu nha, kh√¥ng l√† gi·∫≠n ƒë√≥! üòú\n";
                        else if (policy == "AdminOnly")
                            operation.Description += $"  - {policy}: Ph·∫£i l√† `Admin` m·ªõi ƒë∆∞·ª£c nha, quy·ªÅn cao l·∫Øm lu√¥n √°! üßë‚Äçüíº\n";
                        else
                            operation.Description += $"  - {policy}: Ch√≠nh s√°ch n√†y c≈©ng quan tr·ªçng l·∫Øm nha! üòä\n";
                    }
                }
            }
        }
    }
}